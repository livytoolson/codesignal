"""
Using Big O notation, what is the correct classification of time complexity for the function below?

def do_lots_of_things(items):
    last = len(items) - 1
    print(items[last])

    middle = len(items) / 2
    i = 0
    while i < middle:
        print(items[i])
        i += 1

    for num in range(100):
        print(num)

ANSWER - O(n)
"""

"""
Using Big O notation, what is the correct classification of space complexity for the function below?

def do_a_couple_things(n):
    my_list = []
    my_second_list = [0] * 26
      
    for _ in range(n):
        my_list.append("lambda")
        print(my_second_list[n % 25])

    return my_list

ANSWER - O(n)
"""

"""
Given a sorted array (in ascending order) of integers and a target, write a function that finds the two integers that add up to the target.

Examples:

csSortedTwoSum([3,8,12,16], 11) -> [0,1]
csSortedTwoSum([3,4,5], 8) -> [0,2]
csSortedTwoSum([0,1], 1) -> [0,1]
Notes:

Each input will have exactly one solution.
You may not use the same element twice.
"""

def csSortedTwoSum(numbers, target):
    for num_one in numbers:
        for num_two in numbers:
            if num_one + num_two == target:
                return [numbers.index(num_one), numbers.index(num_two)]

              
    # for i in range(len(numbers)):
    #     for j in range(i, len(numbers)):
            
    #         # if number at index i + number at index j is equal to target
    #         if numbers[i] + numbers[j] == target:
                
    #             # return index i and index j
    #             return [i, j]


"""
You are given two strings, str_1 and str_2, where str_2 is generated by randomly shuffling str_1 and then adding one letter at a random position.

Write a function that returns the letter that was added to str_2.

Examples:

csFindAddedLetter(str_1 = "bcde", str_2 = "bcdef") -> "f"
csFindAddedLetter(str_1 = "", str_2 = "z") -> "z"
csFindAddedLetter(str_1 = "b", str_2 = "bb") -> "b"
csFindAddedLetter(str_1 = "bf", str_2 = "bfb") -> "b"
Notes:

str_1 and str_2 both consist of only lowercase alpha characters.
"""

def csFindAddedLetter(str_1, str_2): 
    # create two empty strings to hold the strings that are passed in
    small_str = ""
    large_str = ""
    
    # if the length of string 1 is greater than the length of string 2
    if len(str_1) > len(str_2):
        # assign the small string to string 2
        small_str = str_2
        # assign the larger string to string 1
        large_str = str_1
        
    else:  # if the length of string 2 is greater than the length of string 1
        # assign the small string to string 1
        small_str = str_1
        # assign the large string to string 2
        large_str = str_2
        
    # keep a running total to add to for sum of character codes
    small_total = 0
    large_total = 0
    i = 0 
    
    # when the count is less than the small string -- add the character codes to both strings       and increment the count
    while (i < len(small_str)):
        small_total += ord(small_str[i])
        large_total += ord(large_str[i])
        i += 1
    
    # add the last character code to the larger string
    large_total += ord(large_str[i])
    
    # subtract the small character code total from the large character code total for the           character code of the character that is different between the two strings
    res = large_total - small_total
    
    # turn the character code into a character and return
    return chr(res)


"""
Given a string, write a function that returns the index of the first unique (non-repeating) character. If there isn't a unique (non-repeating) character, return -1.

Examples:

csFirstUniqueChar(input_str = "lambdaschool") -> 2
csFirstUniqueChar(input_str = "ilovelambdaschool") -> 0
csFirstUniqueChar(input_str = "vvv") -> -1
Notes:

input_str will only contain lowercase alpha characters.
"""

def csFirstUniqueChar(input_str):
    for s in input_str:
        if input_str.count(s) == 1:
            return input_str.index(s)
    return -1